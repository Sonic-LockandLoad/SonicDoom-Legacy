class SonicPlayer : PlayerPawn
{
	Default
	{
		Speed 2;
		Health 125;
		Radius 10;
		Height 46;
		PainChance 255;
		Mass 100;
		DamageFactor "RocketStream", 0.2;
		Player.MaxHealth 999;
		Player.DisplayName "Sonic";
		Player.SoundClass "sonic";
		Player.JumpZ 12.0;
		Player.Face "CLF";
		Player.StartItem "SpeedforcePistol";
		Player.StartItem "Caliburn";
		Player.StartItem "SonicKick";
		Player.StartItem "ChaosEnergy", 150;
		Player.WeaponSlot 1, "Caliburn";
		Player.WeaponSlot 2, "SpeedforcePistol";
		Player.WeaponSlot 3, "SpeedyShotgun";
		Player.WeaponSlot 4, "ChaosRain";
		Player.WeaponSlot 5, "EclipseBlaster";
		Player.WeaponSlot 6, "RocketStream";
	}
	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
	{
		Super.TakeSpecialDamage(inflictor, source, damage, damagetype);
		if (damage > 0 && damage < 999 && !(player.cheats & CF_GODMODE) && !CountInv("PowerInvulnerable")) {
			if (health >= 20 && damage > health) {
				damage = health - 1;
			}
			A_StartSound("sglobal/loserings", 6);
			int ringcount = damage;
			int maxrange  = damage / 4;
			if (maxrange < 5) maxrange = 5;
			if (maxrange > 15) maxrange = 15;
			if (ringcount > 150) ringcount = 150;
			for (int x = 1; x <= ringcount; x++) {
				int x = random(maxrange * -1, maxrange);
				int y = random(maxrange * -1, maxrange);
				A_SpawnItemEx("DroppedRingPlayer", 0, 0, 1, x, y, 15);
			}
		}
		return damage;
	}
	override void CheckJump()
	{
		let player = self.player;
		int buttons = GetPlayerInput(MODINPUT_BUTTONS);
		if (GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP)) {
			int buttons = GetPlayerInput(MODINPUT_BUTTONS);
			if (bNoGravity) {
				Vel.Z = 3.;
			}
			else if (level.IsJumpingAllowed() && player.onground) {
				cvar.FindCvar("DidJump").SetBool(true);
				double jumpvelz = JumpZ * 35 / TICRATE;
				double jumpfac = 0;

				if (jumpfac > 0) {
					jumpvelz *= jumpfac;
				}
				
				if (player.crouchoffset != 0) {
					player.crouching = 1;
				}

				Vel.Z = jumpvelz;
				bOnMobj = false;
				player.jumpTics = 0;
				if (!(player.cheats & CF_PREDICTING)) {
					A_StartSound("*jump", CHAN_BODY);
				}
			}
		}
	}
	States
	{
		Spawn:
			PLAY A -1;
			Loop;
		See:
			PLAY ABCD 4 A_SetSpeed(2);
			Loop;
		Missile:
			PLAY E 12;
			Goto Spawn;
		Melee:
			PLAY F 6 BRIGHT;
			Goto Missile;
		Pain:
			PLAY G 4;
			PLAY G 0 A_PlaySound("sglobal/loserings", 6);
			PLAY G 4 A_PlaySound("sonic/pain", 7);
			Goto Spawn;
		Death:
			TNT1 A 0
			{
				if (random(1, 4) == 4) {
					A_PlaySound("sonic/thatwaslame");
					A_Log("\c[Sonic]Well. That was lame.");
				}
				else {
					A_PlaySound("sonic/scream");
				}
			}
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 1);
			TNT1 A 0 A_PlaySound("sonic/ohno");
			TNT1 A 0 A_Log("OH NO");
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
}
class LockLoadWeapon : Weapon
{
	override bool DepleteAmmo(bool altFire, bool checkEnough, int ammouse)
	{
		if (CountInv("PowerSuper", AAPTR_Player1)) {
			if (!altfire) {
				A_GiveInventory("ChaosEnergy", AmmoUse1, AAPTR_Player1);
			}
			else {
				A_GiveInventory("ChaosEnergy", AmmoUse2, AAPTR_Player1);
			}
		}
		super.DepleteAmmo(altFire, checkEnough, ammouse);
		return true;
	}
}

class BoostEnabledWeapon : LockLoadWeapon
{
	int BoostSpeed;
	bool BoostCheck;
	action void Boost(int form, int InitialBoostSpeed, int MaxBoostSpeed)
	{
		if (!invoker.BoostCheck) {
			int speed = sqrt((Vel.X ** 2) + (Vel.Y ** 2));
			invoker.BoostCheck = true;
			if (speed > InitialBoostSpeed) {
				invoker.BoostSpeed = speed;
			}
			else {
				invoker.BoostSpeed = InitialBoostSpeed;
			}
			A_StartSound("sonic/boost", 6);
			A_StartSound("sweapons/boost", 7);
			if (!form) A_TakeInventory("ChaosEnergy", 5);
		}
		switch (form) {
			default:
				/* Sonic */
				A_SetMugShotState("Boost");
				A_FireBullets(60, 60, 150, 1, "BoostPuff", FBF_NORANDOM, 125);
				A_TakeInventory("ChaosEnergy", 2);
				break;
			case 1:
				/* Super Sonic */
				A_SetMugShotState("SuperBoost");
				A_FireBullets(120, 120, 150, 999, "BoostPuff", FBF_NORANDOM, 140);
				A_TakeInventory("ChaosEnergy", 1);
				break;
		}
		A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
		A_ChangeVelocity(invoker.BoostSpeed, 0, Vel.Z, CVF_Relative|CVF_Replace);
		if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP) && A_CheckFloor("Null")) {
			A_ChangeVelocity(0, 0, invoker.BoostSpeed / 10, CVF_Relative);
		}
		if (form == 2 && GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP)   A_ChangeVelocity(0, 0,  3);
		if (form == 2 && GetPlayerInput(MODINPUT_BUTTONS) & BT_CROUCH) A_ChangeVelocity(0, 0, -3);
		if (invoker.BoostSpeed <= MaxBoostSpeed) invoker.BoostSpeed += 5;
		A_Light(2);
	}
	action void WallCrash()
	{
		A_StopSound(1);
		invoker.BoostCheck = false;
		int CrashSpeed = ((invoker.BoostSpeed/10)+20)*-1;
		int VerticalCrashSpeed = 0;
		if (Vel.Z >= 1) {
			VerticalCrashSpeed = Vel.Z;
		}
		A_ChangeVelocity(CrashSpeed, 0, VerticalCrashSpeed, CVF_Relative|CVF_Replace);
		A_StartSound("sweapons/finalhit", 8);
		DamageThing(invoker.BoostSpeed / 10, 17);
	}
	States
	{
		Ready:
			TNT1 A 1;
			Loop;
		Deselect:
			#### A 1 A_Lower();
			Loop;
		Select:
			#### A 1 A_Raise();
			Loop;
		Fire:
			TNT1 A 0;
			Goto Ready;
		BoostStart:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "SuperBoost");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy"), "Boost");
			Goto BoostEnd;
		Boost:
			BOOS A 1 Boost(0, 50, 100);
			BOOS A 0 A_CheckLOF("BoostEnd", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			BOOS B 0 A_ReFire();
			Goto BoostEnd;
		SuperBoost:
			BOOS B 1 Boost(1, 75, 175);
			BOOS B 0 A_CheckLOF("BoostEnd", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			BOOS B 0 A_ReFire();
			Goto SuperBoostEnd;
		BoostEnd:
			BOOS A 5 {
				invoker.BoostCheck = false;
				A_StopSound(1);
				A_Light(0);
			}
			Goto Ready;
		SuperBoostEnd:
			BOOS B 5 {
				invoker.BoostCheck = false;
				A_StopSound(1);
				A_Light(0);
			}
			Goto Ready;
	}
}

class Caliburn : BoostEnabledWeapon
{
	Default
	{
		Weapon.SelectionOrder 1;
		Weapon.Kickback 1;
		Weapon.BobRangeX 0.5;
		Weapon.BobSpeed 1.5;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			CALI A 1 {
				A_WeaponReady();
				if (GetCvar("SoulSurgeReady")) {
					return ResolveState("SoulCharge");
				}
				return ResolveState(null);
			}
			Loop;
		Deselect:
			CALI # 1 A_Lower();
			Loop;
		Select:
			CALI A 1 A_Raise();
			Loop;
		Fire:
			CAL1 A 1;
			TNT1 A 0 A_StartSound("sweapons/swordswing", 9);
			CAL1 BCD 1 {
				A_CustomPunch(20, false, 0, "BulletPuff", 90, 0, 0, "ArmorBonus", "sweapons/finalhit");
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CAL1 EEEEEE 1 Bright A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire("Slash2");
			Goto Ready;
		Slash2:
			CAL2 A 1;
			TNT1 A 0 A_StartSound("sweapons/swordswing", 9);
			CAL2 BCD 1 {
				A_CustomPunch(20, false, 0, "BulletPuff", 90, 0, 0, "ArmorBonus", "sweapons/finalhit");
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CAL2 EEEEEE 1 Bright A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 A_Overlay(-3, "BoostStart");
			Goto Ready;
		Spawn:
			CBRN A -1;
			Stop;
	}
}

class SpeedforcePistol : LockLoadWeapon replaces Pistol
{
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.Kickback 9999999;
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoGive 30;
		Weapon.SlotNumber 2;
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 25;
		AttackSound "weapons/rbeam";
		Inventory.PickupMessage "Picked up the Speedforce handheld railgun!";
		Tag "Speedforce Railgun";
		+EXTREMEDEATH
		+WEAPON.NOAUTOFIRE
		+FORCEPAIN
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.ALT_AMMO_OPTIONAL
	}
	States
	{
		Ready:
			SPFR A 1 A_WeaponReady();
			Loop;
		Deselect:
			SPFR A 1 A_Lower();
			Loop;
		Select:
			SPFR A 1 A_Raise();
			Loop;
		Fire:
			SPFR A 0 A_JumpIf(CountInv("ChaosEnergy") < 1, "WeakShot");
			SPFR A 0 A_JumpIf(CountInv("ChaosEnergy") > 0, "Shoot");
		Shoot:
			SPFR A 0 Bright {
				if (CountInv("PowerSuper")) {
					A_RailAttack(320, 0, 1, "ff ff 00", "ff b4 00", 0, 0, "none", 0, 0, 0, 100, 4.0, 3.0);
					A_ChangeVelocity(Cos(Pitch) * -10, 0, Sin(Pitch) * 10, CVF_Relative);
				}
				else {
					A_RailAttack(40, 0, 1, "00 b8 ff", "00 2b ff", 0, 0, "none", 0, 0, 0, 25, 1.0, 1.0);
					A_ChangeVelocity(Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				}
			}
			SPFR ABCD 1;
			Goto Ready;
		WeakShot:
			SPFR A 1 A_RailAttack(1, 0, 1, "45 45 45", "45 45 45", 0, 0, "none", 0, 0, 0, 10, 0.5, 0.5);
			SPFR ABCD 1;
			Goto Ready;
		AltFire:
			SPFR A 0 A_JumpIf(CountInv("ChaosEnergy") < 25, "FailCharge");
			SPFR A 0 A_JumpIf(CountInv("ChaosEnergy") > 24, "ChargedShot");
		ChargedShot:
			SPFR A 1 Bright {
				if (CountInv("PowerSuper")) {
					A_RailAttack(460, 0, 1, "ff ff 00", "ff 00 00", 0, 0, "none", 0, 0, 0, 100, 4.0, 3.0);
					A_ChangeVelocity(Cos(Pitch) * -20, 0, Sin(Pitch) * 20, CVF_Relative);
				}
				else {
					A_RailAttack(160, 0, 1, "ff 00 00", "ff b4 00", 0, 0, "none", 0, 0, 0, 50, 2.0, 1.5);
					A_ChangeVelocity(Cos(Pitch) * -15, 0, Sin(Pitch) * 15, CVF_Relative);
				}
			}
			SPFR ABCDDDDD 1;
			Goto Ready;
		FailCharge:
			TNT1 A 0 A_Print("I need 25 Chaos energy for a charged burst!");
			TNT1 A 0 A_PlaySound("sglobal/error");
			Goto Ready;
		Spawn:
			SPER A -1;
			Stop;
	}
}

class SpeedyShotgun : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 8;
		Weapon.AmmoGive 32;
		Weapon.KickBack 500;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		AttackSound "weapons/shotgf";
		Tag "Speedy Shotgun";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "Picked up the speedy shotgun!";
	}
	States
	{
		Ready:
			SHTG A 1 A_WeaponReady();
			Loop;
		Deselect:
			SHTG A 1 A_Lower;
			Loop;
		Select:
			SHTG A 1 A_Raise;
			Loop;
		Fire:
			SHTG A 4
			{
				A_FireBullets(5.6, 0, 7, 4, "BulletPuff");
				A_PlaySound("weapons/shotgf", CHAN_WEAPON);
				A_GunFlash();
			}
			Goto Ready;
		Flash:
			SHTF A 3 Bright A_Light1;
			SHTF B 2 Bright A_Light2;
			Goto LightDone;
		Spawn:
			SHOT A -1;
			Stop;
	}
}

class ChaosRain : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Chaos Rain";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "Picked up the Chaos Rain cannon!";
	}
	States
	{
		Ready:
			CHGG A 1 A_WeaponReady();
			Loop;
		Deselect:
			CHGG A 1 A_Lower();
			Loop;
		Select:
			CHGG A 1 A_Raise();
			Loop;
		Fire:
			CHGG A 1
			{
				A_PlaySound("weapons/chngun", CHAN_WEAPON);
				A_GunFlash();
				A_FireBullets(5.6, 0, 1, 7, "BulletPuff");
			}
			CHGG B 1
			{
				A_PlaySound("weapons/chngun", CHAN_WEAPON);
				A_GunFlash();
				A_FireBullets(5.6, 0, 1, 7, "BulletPuff");
			}
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Spawn:
			MGUN A -1;
			Stop;
	}
}

class EclipseBlaster : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse 5;
		Weapon.AmmoGive 35;
		Weapon.KickBack 1000;
		Weapon.BobSpeed 1.5;
		+EXTREMEDEATH
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "Eclipse Blaster! Now we're talking!";
		Tag "Eclipse Blaster";
	}
	States
	{
		Ready:
			ECBL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			ECBL # 1 A_Lower();
			Loop;
		Select:
			ECBL A 1 A_Raise();
			Loop;
		Fire:
			ECBL B 1 A_FireProjectile("ChaosEnergyBall", 0, 1);
			TNT1 A 0 A_ReFire();
			ECBL DDDDDDDDDDDDDDDDDDDDDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		AltFire:
			ECBL C 1 {
				int ringLimit = 300;
				if ((Health < ringLimit) && CountInv("ChaosEnergy") && !CountInv("PowerSuper")) {
					A_PlaySound("sweapons/healthcharge", 4096);
					A_TakeInventory("ChaosEnergy", 4);
					A_GiveInventory("Health", 6);
					if (Health > ringLimit) { A_SetHealth(ringLimit); }
				}
				else {
					A_PlaySound("sglobal/error", 4096);
					return ResolveState("EndHeal");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			/* passthrough */
		EndHeal:
			ECBL DDDDDDDDDDDDDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Spawn:
			ECLI A -1;
			Stop;
	}
}

class RocketStream : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 30;
		Weapon.AmmoGive 50;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Rocket Stream";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "Picked up the rocket stream launcher!";
	}
	States
	{
		Ready:
			MISG A 1 A_WeaponReady();
			Loop;
		Deselect:
			MISG A 1 A_Lower();
			Loop;
		Select:
			MISG A 1 A_Raise();
			Loop;
		Fire:
			MISG B 1 A_GunFlash();
			MISG A 1 A_FireProjectile("StreamRocket");
			Goto Ready;
		Flash:
			MISF A 3 Bright A_Light1;
			MISF B 4 Bright;
			MISF CD 4 Bright A_Light2;
			Goto LightDone;
		Spawn:
			LAUN A -1;
			Stop;
	}
}

class SonicKick : CustomInventory
{
	int inuse;
	action void SonicKickAttack(int damage, int randfactor, int range)
	{
		A_CustomPunch(random(1, randfactor) * damage, true, CPF_NOTURN, "SonicKickPuff", range, 0, 0, "ArmorBonus", "sweapons/finalhit");
	}
	States
	{
		Use:
			TNT1 A 0 A_Overlay(-2, "KickAttack");
			TNT1 A 0 A_OverlayOffset(-2, 0, 32);
			Fail;
		KickAttack:
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0 A_JumpIfInventory("PowerSuper", 1, "SuperKickAttack");
			TNT1 A 0 A_PlaySound("sonic/grunt", 8);
			KICK A 1 A_PlaySound("sweapons/swordswing", 7);
			KICK BC 1;
			KICK D 1 SonicKickAttack(24, 4, 120);
			KICK EF 1;
			Stop;
		SuperKickAttack:
			TNT1 A 0 A_PlaySound("sonic/grunt", 8);
			SKIK A 1 A_PlaySound("sweapons/swordswing", 7);
			SKIK BC 1;
			SKIK D 1 SonicKickAttack(24, 16, 120);
			SKIK EF 1;
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 5;
		}
	}
}